//////////////////////////////////////////////////////////
// Created by hsl on 2022/6/21.
/*
方法说明 : 依赖倒转原则  测试  void main(){int x = 100;}  TTTTTTSSSS

*/
//////////////////////////////////////////////////////////
#include <iostream>
using namespace std;

class AbstractFruit{
public:
    virtual void ShowName() = 0;
};

class Apple : public AbstractFruit{
public:
    void ShowName() override{
        cout << "苹果" << endl;
    }
};
class Banana : public AbstractFruit{
public:
    void ShowName() override{
        cout << "香蕉" << endl;
    }
};
class Pear : public AbstractFruit{
public:
    void ShowName() override{
        cout << "鸭梨" << endl;
    }
};

class FruitFactory{
public:
    static  AbstractFruit* CreateFruit(string flag){
        if(flag == "apple") return new Apple;
        else if(flag == "banana") return new Banana;
        else if(flag == "pear") return new Pear;
        else return nullptr;
    }
};


int main(int argc, char *argv[]) {
    int i;
    auto apple = FruitFactory::CreateFruit("banana");
    if(apple != nullptr) apple->ShowName();

    return 0;
}

